export default {
    __name__: 'dataCenter',

    // nav
    dataCenter: 'data Center',
    api: 'Access to the API',
    // chart
    success: 'Success',
    failure: 'Failure<br/>Click to see the error information',
    successCount: 'Success counts: ',
    failureCount: 'Failure counts: ',
    Mon: 'Mon',
    Tues: 'Tues',
    Wed: 'Wed',
    Thur: 'Thur',
    Fri: 'Fri',
    Sat: 'Sat',
    Sun: 'Sun',
    // api
    row: ' row(s)',
    overview: 'Overview',
    setting: 'Setting',
    howUpload: 'How to upload',
    confirmDel: 'Confirm delete?',
    delAPIMsg: 'Confirm delete API?',
    successMsg: 'Deleted API successfully',
    update: 'Updating',
    realTime: 'real-time',
    successRate: 'Success rate',
    accessed: 'accessed',
    imported: 'imported',
    importing: 'importing',
    error: 'error',
    date: 'Date',
    errorNum: 'error number',
    operation: 'operation',
    errMsgDesc: 'Error data details (Show only the 100 data)',
    errDataMsg: 'Error data details',
    sort: 'sort',
    errType: 'Error type',
    errData: 'Error Data',
    noErrData: 'No error data',
    dataPreview: 'Data preview',
    createPrivateKey: 'Create private key',
    sourceName: 'Data source',
    securityCheck: 'Security check',
    using: 'using',
    closed: 'closed',
    expire: 'Expiration time',
    rebuilt: 'Rebuilt',
    create: 'Create',
    next: 'Next',
    succeed: 'Succeed',
    viewStatus: 'Enter the details page to view the status of the data source.',
    viewSource: 'View data source',
    sourceNameNoEmpty: 'Source name cannot be empty',
    expireNoEmpty: 'Expiration time cannot be empty',
    sourceNameReg: 'Source name cannot contain special symbols such as + = | ！ ~ · \' ‘ ’  / * % ^ & . < > ',
    expireRangeReg: 'Expiration time value should be 1——2592000',
    expireReg: 'Positive integer and not contain special symbols',
    reCreate: 'Data may be lost after regeneration, confirm to regeneration',
    confirmCreate: 'Regeneration confirm',
    // service-sdk
    severSDKAccess: 'Sever SDK access',
    deleteSDKConfirm: 'Confirm delete SDK?',
    deleteSDKSuccess: 'Delete SDK successfully',
    download: 'Download ',
    config: 'Environment configuration',
    addDep: 'Add dependence ',
    downloadJar: 'Place the downloaded jar into the project lib directory',
    configuration: 'Configuration',
    interface: ' interface',
    interfaceCategory: 'Interface category',
    interfaceType: 'Interface type',
    interfaceName: 'Interface name',
    paramList: 'Parameter list',
    userDataInterface: 'User data interface',
    userProperty: 'User property',
    deleteInterface: 'Delete user interface',
    keyUserAttr: 'user property with primary key identifier',
    eventInterface: 'Event data interface',
    eventName: 'Event name, user attributes identified with a primary key, and event attributes associated with the event',
    paramDes: 'Parameter explanation',
    oneValue: 'properties all need "user property with  primary key identifier", and at least one have assigned value',
    specialNote: 'special note:',
    note1: '"user property with primary key identifier": In "data center-metadata-user property" menu, you can set up some properties as primary key,for example,set up "mobile" and "email" as primary key, when importing data, users are queried and updated based on these two properties.',
    note2: 'Two additional properties are required in the event data, "event_id" and "create_time", event_id is a unique identifier for the event data, create_time is the time when the event occurred.',
    use: 'Use SDK',
    userDataSample: 'User data sample',
    statement: 'Declare SDK object, SECRET required',
    model: 'Debugging mode:only format validation is not performed in the library. Note: the default value is false, and the production environment must set this parameter to false or comment out the configuration.',
    importUserStart: 'Import user sample  start',
    isUserKey: 'is user property with primary key identifier',
    isUserNormal: 'is normal user property',
    sendRequest: 'send request',
    outPut: 'output',
    importEnd: 'Import user sample  end',
    eventSample: 'Event data sample',
    importEventStart: 'Import event sample  start',
    isEventNormal: 'is event property',
    extraParam: 'is additional parameter',
    importEventEnd: 'Import event sample  end',
    deleteUserSample: 'Delete user sample',
    deleteStart: 'Delete user sample  start',
    deleteEnd: 'Delete user sample  end',
    back: 'Returns the result',
    correct: 'when request succeed,the JSON package returned as follows',
    errorBack: 'when request filed,the JSON package returned as follows',
    codeDesc: 'Return code specification',
    returnCode: 'return code',
    desc: 'specification',
    requestSuccess: 'Request successfully',
    systemErr: 'System error',
    notIlle: '"type" value illegal',
    abcent: 'miss secret parameters',
    listEmpty: 'property list is empty',
    verifyFailed: 'Authentication failed',
    noKey: 'user property with primary key identifier missing',
    checkFailed: 'Data validation failed',
    remark: 'remark',
    remarkDetail: 'This result only identifies the request result. For the data import result, please view the import details of the relevant data sources in the system.',
    downloadsdkFailed: 'Download sdk error',
    jsonFailed: 'json data format failed',
    needOneKey: 'need at least one valued user property with primary key identifier',
    // js sdk
    jsSDKAccess: 'JS SDK access',
    // sftp
    sftpAccess: 'SFTP access',
    sftpDeleteConfirm: 'Confirm delete SFTP access?',
    deleteSFTPSuccess: 'Delete SFTP successfully',
    recentlySuccess: ' Recently successful operation',
    averageTime: 'Average successful duration',
    fileName: 'file name',
    uploader: 'Uploaded by',
    startTime: 'start time',
    updatedRow: 'updated rows',
    result: 'result',
    intervalCal: 'interval cumulative',
    endTime: 'end time',
    secondAgo: 'seconds ago',
    minuteAgo: 'minutes ago',
    hourAgo: 'hours ago',
    dayAgo: 'days ago',
    monthAgo: 'months ago',
    yearAgo: 'years ago',
    accountName: 'Account name',
    createPrivateKeyMe: 'Create  a private key for me',
    usePrivateKeyMe: 'Use my own secret key',
    updatePublicKey: 'Upload public key',
    noChooseFile: 'No files were selected',
    notes: 'Note:It\'s better to download the private key file once. Without this file, you will not be able to access the data.',
    failed: 'Failed',
    downloadFailed: 'Download private failed,click ',
    lastStep: 'previous',
    reDownload: 'Download again.',
    uploadSuccess: 'Upload new private key successfully.',
    saveNote: 'You have downloaded the generated secret key. Please store this file in a secure location.',
    parameterSet: 'set up parameter',
    taskTime: 'Task execution time',
    time: 'time: ',
    parameterSuccess: 'Parameters saved successfully',
    fileTemplate: 'Create file template',
    viewDetail: 'Enter the details page to view the status of the data source',
    accountNameNoEmpty: 'Account name cannot be empty',
    accountNameReg: 'Account name only allow alphabet,number and underline',
    stepThreeErr: 'The third step is incomplete. Please complete it.',
    downloadErr: 'Download private key error',
    selectPublicFile: 'Please select public key file!',
    fileSize: 'Private key file is too large',
    privateReg: 'Private key content is not formatted correctly',
    templateErr: 'Create file template error',
    everyDay: 'every day',
    everyWeek: 'every week',
    everyMonth: 'every month',
    monday: 'Monday',
    tuesday: 'Tuesday',
    wednesday: 'Wednesday',
    thursday: 'Thursday',
    friday: 'Friday',
    saturday: 'Saturday',
    sunday: 'Sunday',
    day1: 'first day',
    day2: 'second day',
    day3: 'third day',
    day4: 'fourth day',
    day5: 'fifth day',
    day6: 'sixth day',
    day7: 'seventh day',
    day8: 'eighth day',
    day9: 'ninth day',
    day10: 'tenth day',
    day11: 'eleventh day',
    day12: 'twelfth day',
    day13: '13th day',
    day14: '14th day',
    day15: '15th day',
    day16: '16th day',
    day17: '17th day',
    day18: '18th day',
    day19: '19th day',
    day20: '20th day',
    day21: '21th day',
    day22: '22th day',
    day23: '23th day',
    day24: '24th day',
    day25: '25th day',
    day26: '26th day',
    day27: '27th day',
    day28: '28th day',
    day29: '29th day',
    day30: '30th day',
    day31: '31th day',
    // data-center
    source: 'Data source',
    totalRow: 'Total number of rows',
    dataAccess: 'Data access',
    severAccess: 'Sever access',
    clientAccess: 'Client access',
    dataFileAccess: 'Data file access',
    accessTool: 'Access tool',
    logAccess: 'Log access',
    historyAccess: 'History file access',
    inDevelopment: 'In the development...',
    name: 'Name:',
    type: 'Type:',
    rows: 'Rows:',
    noEventData: 'No event data',
    noUserData: 'No user data',
    fileRow: 'Data rows',
    progress: 'progress',
    successNumber: 'updated rows',
    errorNumber: 'Error rows',
    durationTime: 'durationTime',
    remind: 'The CSV file is only kept for 30 days. Please download it within the validity period.',
    allData: 'All data',
    erroneous: 'Erroneous data',
    emailTo: 'Specify email',
    emailEmptyError: 'delivery email can\'t be empty',
    emailFormatError: 'invalid email',
    acceptEmail: 'The exported data has been sent to your mailbox, please note to check',
    DataRowD: 'Data rows(deduplication)',
    successNumberD: 'updated rows(deduplication)',
};